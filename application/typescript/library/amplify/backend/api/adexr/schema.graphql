# DELETE ME
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } }
# DELETE ME

type Feedback @model @auth(rules: [{allow: public}]) {
  comment: String!
  commentType: feedbackType!
  status: feedbackStatus!
  wallet: String!
}

enum feedbackStatus {
  pending
  reviewed
  projectItem
}

enum feedbackType {
  general
  enhancement
  bug
  interest
}

type Message @model @auth(rules: [{allow: public}]) {
  id: ID!
  message: String!
  wallet: String!
  createdAt: String!
}

# type GamesSummary @model @auth(rules: [{allow: public}]) {
#   id: Int!
#   totalCompletedGames: Int!
#   totalUniquePlayers: Int!
#   totalPayouts: Float!
#   highestPayout: Float!
# }

type ErrorLog @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: String!
  stackTrace: String!
}

enum poolType {
  lottery
  manual
  api
  custom_builder
}

enum poolStatus {
  awaiting
  completed
  terminated
}

enum PlayerStatus {
  pending_pool_completion
  withdrew
  win
  lose
}


# POOL START #
enum PoolCategory {
  other
  sports
  esports
  gaming
  politics
  financial
}

type PoolPlayer @model {
  userWalletId: String! @primaryKey(sortKeyFields: ["poolId"])
  userWallet: UserWallet! @hasOne
  status: PlayerStatus!
  pool: Pool! @belongsTo
  poolId: Int!
}

type ApiPoolAttributes @model {
  apiKey: String!
  lockFundsDatetime: AWSDateTime!
  executeWinnerDatetime: AWSDateTime!
  apiUrlForResults: AWSURL!
  verifiedUrlSchema: Boolean!
  poolCreatorPercentFeeToWithold: Int!
  apiWinnerOptionEntries: AWSJSON!
  apiwinnerResult: String!
  poolApiDefaultSchema: AWSJSON!
  poolApiCustomSchema: AWSJSON
  pool: Pool! @belongsTo
  poolId: Int! @primaryKey
}
type Pool @model {
  poolId: Int! @primaryKey
  poolTitle: String!
  poolCategory: PoolCategory!
  poolCreator: UserWallet! @hasOne
  poolType: poolType!
  poolStatus: poolStatus!
  poolEntryFee: Int!
  poolTotal: Int!
  poolWinningPayout: Int!
  allowPlayerLeave: Boolean!
  apiPoolAttributes: ApiPoolAttributes @hasOne
  requestHash: String!
  players: [PoolPlayer]! @hasMany
}

type PoolSuccessfullBlockEventsProcessed @model {
  id: Int! @primaryKey  
  lambdaProcessorDecisionCheckForNextBlocknumber: Int!  
}

type PoolSummaries @model {
  id: ID!
  totalCompletedGames: Int!
  totalPlayers: Int!
  totalPayouts: Int!
  highestSingleWinnerPayout: Int!
  highestPoolPayout: Int!
}

type UserWallet @model {
  wallet: String! @primaryKey
  nickname: String!
  chatlogo: AWSURL
  brands: [Brand] @hasMany
  totalWinnings: Int!
  totalPools: Int!
  totalCompletedPools: Int!
  totalPoolsWon: Int!
}
type Brand @model {
  id: ID!
  wallet: String!
  name: String!
  rating: Int!
  logo: AWSURL
  completedPools: Int!
  failedPools: Int!
}

type EventLogMeta  {   
  txID: String!
  blockID: String!
  blockNumber: Int!
  blockTimestamp: Int!
  txOrigin: String!
  clauseIndex: Int!
}

# CreatePoolEvent
# type CreatePoolEventDecoded  {  
#   gameId: Int!
#   player: String!
#   dateTime: String!  
# }

type CreatePoolEventLog @model @searchable @auth(rules: [{allow: public}]) {
  txID: String! @primaryKey
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedGameId: Int!
  decodedPlayer: String!
  decodedDateTime: String!  
}
# CreatePoolEvent

# PlayerJoinedPoolEventDecoded
# type PlayerJoinedPoolEventDecoded @model {
#   txID: String! @primaryKey(sortKeyFields: ["gameId", "player"])
#   gameId: Int!
#   player: String!
#   dateTime: String!
#   playerJoinedPoolEventLog: PlayerJoinedPoolEventLog! @belongsTo
# }

# type PlayerJoinedPoolEventLog @model {
#   txID: String! @primaryKey
#   raw: AWSJSON!
#   meta: EventLogMeta! 
#   decoded: PlayerJoinedPoolEventDecoded! @hasOne
# }
# PlayerJoinedPoolEventDecoded

type PlayerJoinedPoolEventLog @model @searchable @auth(rules: [{allow: public}]) {
  txID: String! @primaryKey
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedGameId: Int!
  decodedPlayer: String!
  decodedDateTime: String!  
 }


# PlayerJoinedPoolEventDecoded
# type PlayerLeftPoolEventDecoded @model {
#   txID: String! @primaryKey(sortKeyFields: ["gameId", "player"])
#   gameId: Int!
#   player: String!
#   dateTime: String!
#   playerLeftPoolEventLog: PlayerLeftPoolEventLog! @belongsTo
# }

# type PlayerLeftPoolEventLog @model {
#   txID: String! @primaryKey
#   raw: AWSJSON!
#   meta: EventLogMeta! 
#   decoded: PlayerLeftPoolEventDecoded! @hasOne
# }
# PlayerJoinedPoolEventDecoded
type PlayerLeftPoolEventLog @model @searchable @auth(rules: [{allow: public}]) {
  txID: String! @primaryKey
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedGameId: Int!
  decodedPlayer: String!
  decodedDateTime: String!  
 }

# PoolAwaitingExecutionEventDecoded
# type PoolAwaitingExecutionEventDecoded @model {
#   txID: String! @primaryKey(sortKeyFields: ["gameId", "status"])
#   gameId: Int!
#   status: String!
#   dateTime: String!
#   poolAwaitingExecutionEventLog: PoolAwaitingExecutionEventLog @belongsTo
# }

# type PoolAwaitingExecutionEventLog @model {
#   txID: String! @primaryKey
#   raw: AWSJSON!
#   meta: EventLogMeta! 
#   decoded: PoolAwaitingExecutionEventDecoded! @hasOne
# }
# PoolAwaitingExecutionEventDecoded

type PoolAwaitingExecutionEventLog @model @searchable @auth(rules: [{allow: public}]) {
  txID: String! @primaryKey
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedGameId: Int!
  decodedStatus: String!
  decodedType: String!
  decodedDateTime: String!  
 }

# PoolCompletedEventDecoded
# type PoolCompletedEventDecoded @model {
#   txID: String! @primaryKey(sortKeyFields: ["gameId", "player", "auditRecordDrawId"])
#   gameId: Int!
#   player: String!
#   dateTime: String!
#   winningPayout: String!
#   transactionId: String!
#   auditRecordDrawId: String!
#   poolCompletedEventLog: PoolCompletedEventLog @belongsTo
# }

# type PoolCompletedEventLog @model {
#   txID: String! @primaryKey
#   raw: AWSJSON!
#   meta: EventLogMeta! 
#   decoded: PoolCompletedEventDecoded! @hasOne
# }
# PoolCompletedEventDecoded
type PoolCompletedEventLog @model @searchable @auth(rules: [{allow: public}]) {
  txID: String! @primaryKey
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedWinningPayout: String!
  decodedGameId: Int!
  decodedPlayer: String!
  decodedStatus: String!
  decodedAuditRecordDrawId: String!
  decodedType: String!
  decodedDateTime: String!  
 }

input CreateIngestionBucketEventInput {
  event: AWSJSON!
}

type IngestionBucketResponse {
  s3: AWSJSON!
  sqs: AWSJSON!
}

type Mutation {
  createIngestionEvent(input: CreateIngestionBucketEventInput!): IngestionBucketResponse @function(name: "addBlocktickerEventToS3-${env}") @function(name: "addBlocktickerEventToSQS-${env}")
}
