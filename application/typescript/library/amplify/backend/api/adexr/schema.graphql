# DELETE ME
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } }
# DELETE ME

type Feedback @model @searchable {
  id: ID!
  comment: String!
  commentType: feedbackType!
  status: feedbackStatus!
  wallet: String!
}

enum feedbackStatus {
  pending
  reviewed
  projectItem
}

enum feedbackType {
  general
  enhancement
  bug
  interest
}

 type Message @model @searchable {
   id: ID!
   message: String!
   wallet: String!
   createdAt: String!
 }

type ErrorLog @model {
  id: ID!
  createdAt: String!
  stackTrace: String!
}

enum poolType {
  lottery
  manual
  api
  custom_builder
}

enum PlayerStatus {  
  withdrew
  joined
  winner  
}

enum PoolCategory {
  other
  sports
  esports
  gaming
  politics
  financial
  random_winners
}

type PoolPlayer @model @searchable{
  id: ID!
  userWallet: UserWallet! @hasOne
  status: PlayerStatus!
  pool: Pool! @belongsTo  
}

type LotteryPoolAttributes @model @searchable {
  id: ID!
  auditRecordDrawId: String
  isAuditEnabled: Boolean!
  randomOrgUrlForResults: AWSURL
  pool: Pool! @belongsTo
}

type ApiPoolAttributes @model @searchable {
  id: ID!
  apiKey: String!
  lockFundsDatetime: AWSDateTime!
  executeWinnerDatetime: AWSDateTime!
  apiUrlForResults: AWSURL!
  verifiedUrlSchema: Boolean!
  poolCreatorPercentFeeToWithold: Int!
  apiWinnerOptionEntries: AWSJSON!
  apiwinnerResult: String!
  poolApiDefaultSchema: AWSJSON!
  poolApiCustomSchema: AWSJSON
  pool: Pool @belongsTo
}
type Pool @model @searchable {
  id: ID!
  poolId: Int!
  poolTitle: String!
  poolCategory: PoolCategory!
  poolCreator: UserWallet! @hasOne
  poolType: poolType!
  poolStatus: String!
  poolEntryFee: String!
  poolTotal: String!
  poolWinningPayout: String!
  allowPlayerLeave: Boolean!
  apiPoolAttributes: ApiPoolAttributes @hasOne
  lotteryPoolAttributes: LotteryPoolAttributes @hasOne  
  players: [PoolPlayer] @hasMany
}

 type PoolSuccessfullBlockEventsProcessed @model {
   id: ID!
   positionField: Int! @index(name: "byPositionField", queryField: "poolSuccessfullBlockEventsProcessedByPositionFieldIndex")
   lambdaProcessorDecisionCheckForNextBlocknumber: Int!  
 }

type PoolSummaries @model @searchable{
  id: ID!
  totalCompletedGames: Int!
  totalPlayers: Int!
  totalPayouts: Int!
  highestSingleWinnerPayout: Int!
  highestPoolPayout: Int!
}

type UserWallet @model @searchable {
  id: ID!
  wallet: String! 
  nickname: String
  chatlogo: AWSURL
  brands: [Brand] @hasMany
}

type Brand @model @searchable {
  id: ID!
  wallet: String!
  name: String!
  rating: Int!
  logo: AWSURL
  completedPools: Int!
  failedPools: Int!
}

type CreatePoolEventLog @model @searchable {
  id: ID!
  txID: String! @index(name: "byTxId", queryField: "getCreatePoolEventLogbyTxId")
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedGameId: Int!
  decodedPlayer: String!
  decodedDateTime: String! 
  poolJsonData: AWSJSON 
}


type PlayerJoinedPoolEventLog @model @searchable {
  id: ID!
  txID: String! @index(name: "byTxId", queryField: "getPlayerJoinedPoolEventLogbyTxId")
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedGameId: Int!
  decodedPlayer: String!
  decodedDateTime: String!
  poolJsonData: AWSJSON 
 }

type PlayerLeftPoolEventLog @model @searchable {
  id: ID!  
  txID: String! @index(name: "byTxId", queryField: "getPlayerLeftPoolEventLogbyTxId")
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedGameId: Int!
  decodedPlayer: String!
  decodedDateTime: String!  
  poolJsonData: AWSJSON 
 }

type PoolAwaitingExecutionEventLog @model @searchable {
  id: ID!  
  txID: String! @index(name: "byTxId", queryField: "getPoolAwaitingExecutionEventLogbyTxId")
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedGameId: Int!
  decodedStatus: String!
  decodedType: String!
  decodedDateTime: String!  
  poolJsonData: AWSJSON 
 }

type PoolCompletedEventLog @model @searchable {
  id: ID!
  txID: String!  @index(name: "byTxId", queryField: "getPoolCompletedEventLogbyTxId")
  raw: AWSJSON!
  metaBlockID: String!
  metaBlockNumber: Int!
  metaBlockTimestamp: Int!
  metaTxOrigin: String!
  metaClauseIndex: Int!
  decodedWinningPayout: String!
  decodedGameId: Int!
  decodedPlayer: String!  
  decodedAuditRecordDrawId: String!
  decodedType: String!
  decodedDateTime: String!
  poolJsonData: AWSJSON  
 }

input CreateIngestionBucketEventInput {
  event: AWSJSON!
}

type IngestionBucketResponse {
  s3: AWSJSON!
  sqs: AWSJSON!
}

type Mutation {
  createIngestionEvent(input: CreateIngestionBucketEventInput!): IngestionBucketResponse @function(name: "addBlocktickerEventToS3-${env}") @function(name: "addBlocktickerEventToSQS-${env}")
}
